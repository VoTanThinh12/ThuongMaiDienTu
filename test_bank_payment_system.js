/**
 * Script test h·ªá th·ªëng thanh to√°n ng√¢n h√†ng
 * Ch·∫°y: node test_bank_payment_system.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

// Test data
const testOrderId = 'DH001234';
const testAmount = 500000;
const testTransactionId = `bank_${testOrderId}_${Date.now()}`;

async function testBankPaymentSystem() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test h·ªá th·ªëng thanh to√°n ng√¢n h√†ng...\n');

  try {
    // 1. Test t·∫°o QR payment
    console.log('1. Test t·∫°o QR payment...');
    const createResponse = await axios.post(`${BASE_URL}/api/qr-payment/bank/${testOrderId}`, {
      amount: testAmount,
      orderInfo: `Thanh toan don hang ${testOrderId}`
    }, {
      headers: {
        'Authorization': 'Bearer test-token'
      }
    });

    console.log('‚úÖ T·∫°o QR payment th√†nh c√¥ng:');
    console.log(`   - Transaction ID: ${createResponse.data.data.transactionId}`);
    console.log(`   - Amount: ${createResponse.data.data.amount}`);
    console.log(`   - Verification Code: ${createResponse.data.data.verificationCode}`);
    console.log(`   - Bank Info: ${createResponse.data.data.bankInfo.accountName} - ${createResponse.data.data.bankInfo.accountNumber}\n`);

    // 2. Test ki·ªÉm tra tr·∫°ng th√°i
    console.log('2. Test ki·ªÉm tra tr·∫°ng th√°i...');
    const statusResponse = await axios.get(`${BASE_URL}/api/qr-payment/status/${createResponse.data.data.transactionId}`);
    console.log('‚úÖ Ki·ªÉm tra tr·∫°ng th√°i th√†nh c√¥ng:');
    console.log(`   - Status: ${statusResponse.data.data.status}\n`);

    // 3. Test l·∫•y danh s√°ch giao d·ªãch ch·ªù x√°c nh·∫≠n (admin)
    console.log('3. Test l·∫•y danh s√°ch giao d·ªãch ch·ªù x√°c nh·∫≠n...');
    const pendingResponse = await axios.get(`${BASE_URL}/api/qr-payment/pending-bank`, {
      headers: {
        'Authorization': 'Bearer admin-token'
      }
    });
    console.log('‚úÖ L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng:');
    console.log(`   - S·ªë giao d·ªãch ch·ªù x√°c nh·∫≠n: ${pendingResponse.data.data.length}\n`);

    // 4. Test upload sao k√™ ng√¢n h√†ng
    console.log('4. Test upload sao k√™ ng√¢n h√†ng...');
    const statementContent = `
SAO K√ä T√ÄI KHO·∫¢N NG√ÇN H√ÄNG
T√†i kho·∫£n: 1027077985
T√™n t√†i kho·∫£n: PHAN HOAI THAN
Ng√¢n h√†ng: Vietcombank

01/01/2024  500000  Chuyen tien don hang ${testOrderId}
02/01/2024  750000  Thanh toan don hang DH001235
    `;

    const uploadResponse = await axios.post(`${BASE_URL}/api/qr-payment/upload-statement`, {
      fileContent: statementContent
    }, {
      headers: {
        'Authorization': 'Bearer admin-token'
      }
    });

    console.log('‚úÖ Upload sao k√™ th√†nh c√¥ng:');
    console.log(`   - S·ªë giao d·ªãch ph√¢n t√≠ch: ${uploadResponse.data.data.parsedTransactions.length}`);
    console.log(`   - S·ªë giao d·ªãch kh·ªõp: ${uploadResponse.data.data.matchedCount}\n`);

    // 5. Test x√°c minh giao d·ªãch
    console.log('5. Test x√°c minh giao d·ªãch...');
    const verifyResponse = await axios.post(`${BASE_URL}/api/qr-payment/verify/${createResponse.data.data.transactionId}`, {
      verifiedBy: 'Test Admin'
    }, {
      headers: {
        'Authorization': 'Bearer admin-token'
      }
    });
    console.log('‚úÖ X√°c minh giao d·ªãch th√†nh c√¥ng:');
    console.log(`   - Message: ${verifyResponse.data.message}\n`);

    console.log('üéâ T·∫•t c·∫£ test ƒë·ªÅu th√†nh c√¥ng!');
    console.log('\nüìã T√≥m t·∫Øt:');
    console.log('   ‚úÖ T·∫°o QR payment');
    console.log('   ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i');
    console.log('   ‚úÖ L·∫•y danh s√°ch giao d·ªãch');
    console.log('   ‚úÖ Upload sao k√™ ng√¢n h√†ng');
    console.log('   ‚úÖ X√°c minh giao d·ªãch');

  } catch (error) {
    console.error('‚ùå Test th·∫•t b·∫°i:');
    if (error.response) {
      console.error(`   - Status: ${error.response.status}`);
      console.error(`   - Message: ${error.response.data.error || error.response.data.message}`);
    } else {
      console.error(`   - Error: ${error.message}`);
    }
  }
}

// Ch·∫°y test
testBankPaymentSystem();


const QRCode = require('qrcode');
const axios = require('axios');
const cron = require('node-cron');
const { PrismaClient } = require('@prisma/client');
const { createMoMoPayment, verifyMoMoSignature } = require('../utils/momo');
const { buildPaymentUrl } = require('../utils/vnpay');

const prisma = new PrismaClient();

class QRPaymentService {
  constructor() {
    this.activeTransactions = new Map(); // L∆∞u tr·ªØ c√°c giao d·ªãch ƒëang ch·ªù
    this.startCleanupTask();
  }

  // T·∫°o QR code cho thanh to√°n ng√¢n h√†ng
  async createBankQRPayment(orderId, amount, orderInfo) {
    try {
      console.log('Creating bank QR payment:', { orderId, amount, orderInfo });
      
      // üöÄ C·∫≠p nh·∫≠t cho MB Bank
      const bankCode = process.env.VIETQR_BANK_CODE || 'MB';
      const accountNumber = process.env.VIETQR_ACCOUNT_NUMBER || '0346176591';
      const accountName = process.env.VIETQR_ACCOUNT_NAME || 'VO TAN THINH';
      
      console.log('Bank info:', { bankCode, accountNumber, accountName });
      
      // T·∫°o m√£ x√°c minh tr∆∞·ªõc ƒë·ªÉ ƒë∆∞a v√†o n·ªôi dung chuy·ªÉn kho·∫£n
      const verificationCode = this.generateVerificationCode(orderId, amount);
      
      // üîë ƒê·∫£m b·∫£o n·ªôi dung chuy·ªÉn kho·∫£n c√≥ ch·ª©a m√£ x√°c minh
      const enhancedOrderInfo = `${orderInfo || `Thanh toan don hang ${orderId}`} | Ma: ${verificationCode}`;
      
      // T·∫°o QR code th·ª±c t·ª´ API VietQR
      let qrCodeDataURL;
      try {
        qrCodeDataURL = await this.generateVietQRContent({
          bankCode,
          accountNumber,
          accountName,
          amount: Math.round(Number(amount)),
          orderInfo: enhancedOrderInfo,
          orderId
        });
        console.log('QR code generated successfully from VietQR API');
      } catch (qrError) {
        console.error('Failed to generate QR from VietQR API, using fallback:', qrError.message);
        // Fallback: t·∫°o QR code v·ªõi URL
        const vietqrUrl = `https://img.vietqr.io/image/${bankCode}-${accountNumber}-compact2.jpg?amount=${Math.round(Number(amount))}&addInfo=${encodeURIComponent(enhancedOrderInfo)}`;
        qrCodeDataURL = await QRCode.toDataURL(vietqrUrl, {
          width: 300,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        });
        console.log('QR code generated successfully with fallback method');
      }

      // L∆∞u th√¥ng tin giao d·ªãch
      const transactionId = `bank_${orderId}_${Date.now()}`;
      const qrContent = `VietQR://${bankCode}/${accountNumber}/${Math.round(Number(amount))}/${enhancedOrderInfo}`;
      
      const transaction = {
        id: transactionId,
        orderId,
        type: 'bank',
        amount,
        qrContent,
        qrCodeDataURL,
        status: 'pending',
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + 300000), // üöÄ TƒÉng l√™n 5 ph√∫t ƒë·ªÉ c√≥ th·ªùi gian test
        verificationCode // M√£ x√°c minh
      };

      this.activeTransactions.set(transactionId, transaction);

      // L∆∞u v√†o database ƒë·ªÉ admin c√≥ th·ªÉ x√°c minh
      try {
        await this.saveBankTransactionToDatabase(transaction);
        console.log('Bank transaction saved to database successfully');
      } catch (dbError) {
        console.error('Failed to save bank transaction to database:', dbError.message);
        // Kh√¥ng throw error v√¨ QR code ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
      }

      return {
        transactionId,
        qrCodeDataURL,
        qrContent,
        amount,
        expiresAt: transaction.expiresAt,
        verificationCode: transaction.verificationCode,
        bankInfo: {
          bankCode,
          accountNumber,
          accountName: accountName, // üöÄ S·ª≠ d·ª•ng t√™n th·ª±c t·ª´ .env
          bankName: bankCode === 'MB' ? 'MB Bank' : (bankCode === 'VCB' ? 'Vietcombank' : 'Ng√¢n h√†ng'),
          branch: bankCode === 'MB' ? 'Chi nh√°nh MB Bank' : 'Chi nh√°nh TP.HCM'
        }
      };
    } catch (error) {
      console.error('Error creating bank QR payment:', error);
      console.error('Error details:', error.message);
      console.error('Error stack:', error.stack);
      throw error;
    }
  }

  // T·∫°o QR code cho thanh to√°n MoMo
  async createMoMoQRPayment(orderId, amount, orderInfo) {
    try {
      // T·∫°o payment v·ªõi MoMo
      const momoData = await createMoMoPayment({
        amount,
        orderId,
        orderInfo: orderInfo || `Thanh toan don hang ${orderId}`,
        redirectUrl: process.env.MOMO_RETURN_URL,
        ipnUrl: process.env.MOMO_IPN_URL,
      });

      // T·∫°o QR code t·ª´ payUrl c·ªßa MoMo
      const qrCodeDataURL = await QRCode.toDataURL(momoData.payUrl, {
        width: 300,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });

      // L∆∞u th√¥ng tin giao d·ªãch
      const transactionId = `momo_${orderId}_${Date.now()}`;
      const transaction = {
        id: transactionId,
        orderId,
        type: 'momo',
        amount,
        qrContent: momoData.payUrl,
        qrCodeDataURL,
        status: 'pending',
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + 300000), // 5 ph√∫t
        momoRequestId: momoData.requestId
      };

      this.activeTransactions.set(transactionId, transaction);

      return {
        transactionId,
        qrCodeDataURL,
        qrContent: momoData.payUrl,
        amount,
        expiresAt: transaction.expiresAt,
        momoData
      };
    } catch (error) {
      console.error('Error creating MoMo QR payment:', error);
      throw error;
    }
  }

  // T·∫°o QR code th·ª±c t·ª´ API VietQR
  async generateVietQRContent({ bankCode, accountNumber, accountName, amount, orderInfo, orderId }) {
    // URL VietQR ƒë·ªÉ l·∫•y QR code th·ª±c
    const vietqrUrl = `https://img.vietqr.io/image/${bankCode}-${accountNumber}-compact2.jpg?amount=${amount}&addInfo=${encodeURIComponent(orderInfo)}`;
    
    try {
      // S·ª≠ d·ª•ng https module ƒë·ªÉ t·∫£i QR code th·ª±c t·ª´ API VietQR
      const https = require('https');
      const { promisify } = require('util');
      
      const getHttps = promisify(https.get);
      
      return new Promise((resolve, reject) => {
        https.get(vietqrUrl, (response) => {
          if (response.statusCode !== 200) {
            reject(new Error('Kh√¥ng th·ªÉ t·∫£i QR code t·ª´ VietQR'));
            return;
          }
          
          const chunks = [];
          response.on('data', (chunk) => {
            chunks.push(chunk);
          });
          
          response.on('end', () => {
            const buffer = Buffer.concat(chunks);
            const base64 = buffer.toString('base64');
            const dataURL = `data:image/png;base64,${base64}`;
            resolve(dataURL);
          });
        }).on('error', (error) => {
          console.error('L·ªói t·∫£i QR code t·ª´ VietQR:', error);
          // Fallback: t·∫°o QR code v·ªõi URL
          QRCode.toDataURL(vietqrUrl, {
            width: 300,
            margin: 2,
            color: {
              dark: '#000000',
              light: '#FFFFFF'
            }
          }).then(resolve).catch(reject);
        });
      });
    } catch (error) {
      console.error('L·ªói t·∫£i QR code t·ª´ VietQR:', error);
      // Fallback: t·∫°o QR code v·ªõi URL
      const qrCodeDataURL = await QRCode.toDataURL(vietqrUrl, {
        width: 300,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });
      return qrCodeDataURL;
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
  async checkPaymentStatus(transactionId) {
    try {
      console.log('üîç Checking payment status for:', transactionId);
      
      // Ki·ªÉm tra trong database tr∆∞·ªõc
      const dbTransaction = await prisma.giao_dich_ngan_hang.findFirst({
        where: { ma_giao_dich: transactionId }
      });

      console.log('üìä Database query result:', dbTransaction ? 'FOUND' : 'NOT FOUND');
      if (dbTransaction) {
        console.log('   ID:', dbTransaction.ma_giao_dich);
        console.log('   Status:', dbTransaction.trang_thai);
        console.log('   Order:', dbTransaction.ma_don_hang);
      }

      if (!dbTransaction) {
        return { status: 'not_found' };
      }

      // Ki·ªÉm tra timeout
      if (new Date() > dbTransaction.thoi_gian_het_han) {
        return { status: 'expired' };
      }

      // Ki·ªÉm tra tr·∫°ng th√°i trong database
      if (dbTransaction.trang_thai === 'da_xac_nhan') {
        return { status: 'paid' };
      }

      // Ki·ªÉm tra ƒë∆°n h√†ng
      const order = await prisma.don_hang.findFirst({
        where: { ma_don_hang: dbTransaction.ma_don_hang }
      });

      if (order && order.trang_thai_thanh_toan) {
        return { status: 'paid' };
      }

      return { status: 'pending' };
    } catch (error) {
      console.error('Error checking payment status:', error);
      return { status: 'error' };
    }
  }

  // Gi·ªØ ph·∫ßn t·∫°o QR v√† ki·ªÉm tra tr·∫°ng th√°i; lo·∫°i b·ªè x√°c nh·∫≠n t·ª± ƒë·ªông qua webhook ng√¢n h√†ng

  // Cleanup task ch·∫°y m·ªói 5 gi√¢y ƒë·ªÉ x·ª≠ l√Ω timeout ch√≠nh x√°c
  startCleanupTask() {
    cron.schedule('*/5 * * * * *', () => {
      const now = new Date();
      for (const [transactionId, transaction] of this.activeTransactions) {
        if (now > transaction.expiresAt) {
          this.handleTransactionTimeout(transactionId, transaction);
        }
      }
    });
  }

  // X·ª≠ l√Ω timeout giao d·ªãch v·ªõi ƒë·ªô ch√≠nh x√°c cao
  async handleTransactionTimeout(transactionId, transaction) {
    try {
      console.log(`‚è∞ Transaction timeout: ${transactionId}`);
      
      // X√≥a kh·ªèi active transactions
      this.activeTransactions.delete(transactionId);
      
      // C·∫≠p nh·∫≠t database - ƒë√°nh d·∫•u h·∫øt h·∫°n
      await prisma.giao_dich_ngan_hang.updateMany({
        where: { 
          ma_giao_dich: transactionId,
          trang_thai: 'cho_xac_nhan'
        },
        data: {
          trang_thai: 'het_han',
          thoi_gian_xac_nhan: new Date()
        }
      });

      // C·∫≠p nh·∫≠t ƒë∆°n h√†ng v·ªÅ tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (kh√¥ng thanh to√°n)
      const order = await prisma.don_hang.findFirst({
        where: { ma_don_hang: transaction.orderId }
      });

      if (order && order.trang_thai === 'cho_xac_nhan') {
        await prisma.don_hang.update({
          where: { id: order.id },
          data: {
            trang_thai: 'cho_xac_nhan',
            trang_thai_thanh_toan: false
          }
        });
      }
      
      // Emit Socket.IO event ƒë·ªÉ th√¥ng b√°o timeout
      if (global.io) {
        global.io.to(`transaction-${transactionId}`).emit('payment-timeout', {
          transactionId,
          orderId: transaction.orderId,
          message: 'Giao d·ªãch ƒë√£ h·∫øt h·∫°n! Vui l√≤ng th·ª≠ l·∫°i.',
          timeout: true,
          timestamp: new Date().toISOString()
        });
      }
      
      console.log(`‚úÖ Transaction timeout handled: ${transactionId}`);
    } catch (error) {
      console.error('Error handling transaction timeout:', error);
    }
  }

  // L·∫•y danh s√°ch transaction ƒëang ho·∫°t ƒë·ªông
  getActiveTransactions() {
    return Array.from(this.activeTransactions.values());
  }

  // H·ªßy transaction
  cancelTransaction(transactionId) {
    const transaction = this.activeTransactions.get(transactionId);
    if (transaction) {
      this.activeTransactions.delete(transactionId);
      return true;
    }
    return false;
  }

  // T·∫°o m√£ x√°c minh cho giao d·ªãch
  generateVerificationCode(orderId, amount) {
    // T·∫°o m√£ x√°c minh d·ª±a tr√™n orderId v√† amount
    const timestamp = Date.now().toString().slice(-4);
    const amountCode = Math.round(Number(amount)).toString().slice(-3);
    const orderIdStr = orderId.toString();
    return `${orderIdStr.slice(-4)}${amountCode}${timestamp}`;
  }

  // L∆∞u giao d·ªãch ng√¢n h√†ng v√†o database
  async saveBankTransactionToDatabase(transaction) {
    try {
      await prisma.giao_dich_ngan_hang.create({
        data: {
          ma_giao_dich: transaction.id,
          ma_don_hang: transaction.orderId.toString(),
          so_tien: transaction.amount,
          ma_xac_minh: transaction.verificationCode,
          trang_thai: 'cho_xac_nhan',
          thoi_gian_tao: transaction.createdAt,
          thoi_gian_het_han: transaction.expiresAt,
          noi_dung: `Thanh toan don hang ${transaction.orderId} | Ma: ${transaction.verificationCode}` // üîë ƒê·∫£m b·∫£o n·ªôi dung c√≥ m√£ x√°c minh
        }
      });
    } catch (error) {
      console.error('Error saving bank transaction to database:', error);
    }
  }

  // X√°c minh giao d·ªãch ng√¢n h√†ng v·ªõi ki·ªÉm tra k√©p ƒë·ªÉ ƒë·∫£m b·∫£o 100% ch√≠nh x√°c
  async verifyBankTransaction(transactionId, verifiedBy) {
    try {
      console.log(`üîç Verifying bank transaction: ${transactionId} by ${verifiedBy}`);

      // L·∫•y t·ª´ b·ªô nh·ªõ n·∫øu c√≤n; n·∫øu kh√¥ng s·∫Ω fallback DB
      let transaction = this.activeTransactions.get(transactionId);

      // KI·ªÇM TRA K√âP 1: X√°c minh giao d·ªãch t·ªìn t·∫°i trong database (ƒë·ªìng th·ªùi l·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt)
      const dbTransaction = await prisma.giao_dich_ngan_hang.findFirst({
        where: {
          ma_giao_dich: transactionId,
          trang_thai: 'cho_xac_nhan'
        },
        include: {
          don_hang: {
            include: { khach_hang: true }
          }
        }
      });

      if (!dbTransaction) {
        throw new Error('Transaction not found in database or already processed');
      }

      // Fallback: n·∫øu server ƒë√£ restart khi·∫øn m·∫•t activeTransactions, t·∫°o ƒë·ªëi t∆∞·ª£ng t·∫°m t·ª´ DB
      if (!transaction) {
        transaction = {
          id: dbTransaction.ma_giao_dich,
          orderId: dbTransaction.ma_don_hang,
          amount: dbTransaction.so_tien
        };
      }

      // KI·ªÇM TRA K√âP 2: X√°c minh th·ªùi gian h·∫øt h·∫°n
      if (new Date() > dbTransaction.thoi_gian_het_han) {
        throw new Error('Transaction has expired');
      }

      // KI·ªÇM TRA K√âP 3: X√°c minh s·ªë ti·ªÅn kh·ªõp
      if (Number(dbTransaction.so_tien) !== Number(transaction.amount)) {
        throw new Error('Amount mismatch between transaction and database');
      }

      console.log('‚úÖ All verification checks passed');

      // C·∫≠p nh·∫≠t database v·ªõi transaction
      await prisma.$transaction(async (tx) => {
        await tx.giao_dich_ngan_hang.update({
          where: { id: dbTransaction.id },
          data: {
            trang_thai: 'da_xac_nhan',
            nguoi_xac_nhan: verifiedBy,
            thoi_gian_xac_nhan: new Date()
          }
        });

        await tx.don_hang.update({
          where: { id: dbTransaction.don_hang.id },
          data: {
            trang_thai_thanh_toan: true,
            trang_thai: 'da_xac_nhan'
          }
        });
      });

      // X√≥a kh·ªèi active transactions n·∫øu c√≥
      this.activeTransactions.delete(transactionId);

      // Emit Socket.IO event v·ªõi th√¥ng tin chi ti·∫øt
      if (global.io) {
        global.io.to(`transaction-${transactionId}`).emit('payment-success', {
          transactionId,
          orderId: transaction.orderId,
          message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng!',
          verifiedBy: verifiedBy,
          timestamp: new Date().toISOString(),
          customerInfo: {
            name: dbTransaction.don_hang.khach_hang?.ho_ten,
            email: dbTransaction.don_hang.khach_hang?.email
          }
        });
      }

      console.log(`‚úÖ Bank transaction verified successfully: ${transactionId}`);
      return true;
    } catch (error) {
      console.error('Error verifying bank transaction:', error);
      throw error;
    }
  }

  // T·ª´ ch·ªëi giao d·ªãch ng√¢n h√†ng
  async rejectBankTransaction(transactionId, reason, rejectedBy) {
    try {
      const transaction = this.activeTransactions.get(transactionId);
      if (!transaction) {
        throw new Error('Transaction not found');
      }

      // C·∫≠p nh·∫≠t database
      await prisma.giao_dich_ngan_hang.update({
        where: { ma_giao_dich: transactionId },
        data: {
          trang_thai: 'bi_tu_choi',
          ly_do_tu_choi: reason,
          nguoi_xac_nhan: rejectedBy,
          thoi_gian_xac_nhan: new Date()
        }
      });

      // X√≥a kh·ªèi active transactions
      this.activeTransactions.delete(transactionId);

      // Emit Socket.IO event
      if (global.io) {
        global.io.to(`transaction-${transactionId}`).emit('payment-failed', {
          transactionId,
          orderId: transaction.orderId,
          message: 'Thanh to√°n b·ªã t·ª´ ch·ªëi: ' + reason
        });
      }

      return true;
    } catch (error) {
      console.error('Error rejecting bank transaction:', error);
      throw error;
    }
  }

  // L·∫•y danh s√°ch giao d·ªãch ch·ªù x√°c minh
  async getPendingBankTransactions() {
    try {
      return await prisma.giao_dich_ngan_hang.findMany({
        where: { trang_thai: 'cho_xac_nhan' },
        include: {
          don_hang: {
            include: {
              khach_hang: true
            }
          }
        },
        orderBy: { thoi_gian_tao: 'desc' }
      });
    } catch (error) {
      console.error('Error getting pending bank transactions:', error);
      throw error;
    }
  }

  // Ph√¢n t√≠ch sao k√™ ng√¢n h√†ng (c·∫≠p nh·∫≠t cho MB Bank)
  async parseBankStatement(fileContent) {
    try {
      // ƒê√¢y l√† m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n, b·∫°n c√≥ th·ªÉ c·∫£i thi·ªán logic n√†y
      const lines = fileContent.split('\n');
      const transactions = [];

      for (const line of lines) {
        // T√¨m c√°c d√≤ng ch·ª©a th√¥ng tin giao d·ªãch MB Bank
        if (line.includes('VO TAN THINH') || line.includes('0346176591')) {
          // Parse th√¥ng tin giao d·ªãch t·ª´ sao k√™
          // Logic n√†y c·∫ßn ƒë∆∞·ª£c t√πy ch·ªânh theo format sao k√™ c·ªßa MB Bank
          const match = line.match(/(\d{2}\/\d{2}\/\d{4})\s+(\d+\.?\d*)\s+(.+)/);
          if (match) {
            transactions.push({
              date: match[1],
              amount: parseFloat(match[2].replace(/\./g, '')),
              description: match[3]
            });
          }
        }
      }

      return transactions;
    } catch (error) {
      console.error('Error parsing bank statement:', error);
      throw error;
    }
  }

  // T·ª± ƒë·ªông kh·ªõp giao d·ªãch t·ª´ sao k√™
  async autoMatchTransactions(parsedTransactions) {
    try {
      const pendingTransactions = await this.getPendingBankTransactions();
      const matchedTransactions = [];

      for (const parsedTx of parsedTransactions) {
        for (const pendingTx of pendingTransactions) {
          // Ki·ªÉm tra kh·ªõp s·ªë ti·ªÅn v√† th·ªùi gian
          if (Math.abs(parsedTx.amount - pendingTx.so_tien) < 1000 && // Ch√™nh l·ªách < 1000 VND
              parsedTx.description.includes(pendingTx.ma_xac_minh)) {
            
            // T·ª± ƒë·ªông x√°c minh giao d·ªãch
            await this.verifyBankTransaction(pendingTx.ma_giao_dich, 'AUTO_SYSTEM');
            matchedTransactions.push({
              parsedTransaction: parsedTx,
              pendingTransaction: pendingTx
            });
          }
        }
      }

      return matchedTransactions;
    } catch (error) {
      console.error('Error auto matching transactions:', error);
      throw error;
    }
  }
}

module.exports = new QRPaymentService();
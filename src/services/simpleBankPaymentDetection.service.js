const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');

const prisma = new PrismaClient();

class SimpleBankPaymentDetectionService {
  constructor() {
    this.isRunning = false;
    this.checkInterval = null;
  }

  // Kh·ªüi ƒë·ªông h·ªá th·ªëng ƒë∆°n gi·∫£n
  async start() {
    if (this.isRunning) {
      console.log('Simple bank payment detection is already running');
      return;
    }

    console.log('üöÄ Starting SIMPLE Bank Payment Detection...');
    this.isRunning = true;

    // Ki·ªÉm tra m·ªói 5 gi√¢y
    this.checkInterval = setInterval(async () => {
      await this.checkForRealPayments();
    }, 5000);

    console.log('‚úÖ SIMPLE Bank Payment Detection started');
  }

  // D·ª´ng h·ªá th·ªëng
  async stop() {
    if (!this.isRunning) {
      return;
    }

    console.log('üõë Stopping SIMPLE Bank Payment Detection...');
    this.isRunning = false;

    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }

    console.log('‚úÖ SIMPLE Bank Payment Detection stopped');
  }

  // Ki·ªÉm tra thanh to√°n TH·∫¨T
  async checkForRealPayments() {
    try {
      // L·∫•y t·∫•t c·∫£ giao d·ªãch ch·ªù x√°c nh·∫≠n
      const pendingTransactions = await prisma.giao_dich_ngan_hang.findMany({
        where: {
          trang_thai: 'cho_xac_nhan',
          thoi_gian_het_han: {
            gt: new Date() // Ch∆∞a h·∫øt h·∫°n
          }
        },
        include: {
          don_hang: {
            include: {
              khach_hang: true
            }
          }
        }
      });

      for (const transaction of pendingTransactions) {
        await this.checkTransaction(transaction);
      }
    } catch (error) {
      console.error('Error checking real payments:', error);
    }
  }

  // Ki·ªÉm tra giao d·ªãch c·ª• th·ªÉ
  async checkTransaction(transaction) {
    try {
      console.log(`üîç Checking transaction: ${transaction.ma_giao_dich}`);

      // KI·ªÇM TRA 1: Th·ªùi gian h·∫øt h·∫°n
      if (new Date() > transaction.thoi_gian_het_han) {
        console.log(`‚è∞ Transaction ${transaction.ma_giao_dich} expired`);
        await this.handleExpiredTransaction(transaction);
        return;
      }

      // KI·ªÇM TRA 2: S·ªë ti·ªÅn h·ª£p l·ªá
      if (transaction.so_tien <= 0) {
        return;
      }

      // KI·ªÇM TRA 3: ƒê∆°n h√†ng t·ªìn t·∫°i
      if (!transaction.don_hang) {
        return;
      }

      // KI·ªÇM TRA 4: Kh√°ch h√†ng t·ªìn t·∫°i
      if (!transaction.don_hang.khach_hang) {
        return;
      }

      // T·∫†M TH·ªúI: Gi·∫£ l·∫≠p ph√°t hi·ªán thanh to√°n th√†nh c√¥ng
      // TRONG TH·ª∞C T·∫æ: B·∫°n s·∫Ω t√≠ch h·ª£p v·ªõi SMS/Email banking th·∫≠t
      const shouldConfirm = await this.simulatePaymentDetection(transaction);
      
      if (shouldConfirm) {
        await this.confirmPayment(transaction);
      }

    } catch (error) {
      console.error(`Error checking transaction ${transaction.ma_giao_dich}:`, error);
    }
  }

  // Gi·∫£ l·∫≠p ph√°t hi·ªán thanh to√°n (THAY TH·∫æ B·∫∞NG T√çCH H·ª¢P TH·∫¨T)
  async simulatePaymentDetection(transaction) {
    // ƒê√ÇY L√Ä N∆†I B·∫†N S·∫º T√çCH H·ª¢P V·ªöI:
    // 1. SMS Banking API
    // 2. Email Banking API  
    // 3. Vietcombank API
    // 4. Ho·∫∑c upload sao k√™ th·ªß c√¥ng

    // T·∫†M TH·ªúI: Gi·∫£ l·∫≠p 10% c∆° h·ªôi ph√°t hi·ªán thanh to√°n
    const random = Math.random();
    if (random < 0.1) { // 10% c∆° h·ªôi
      console.log(`üéâ SIMULATED: Payment detected for ${transaction.ma_giao_dich}`);
      return true;
    }

    return false;
  }

  // X√°c nh·∫≠n thanh to√°n
  async confirmPayment(transaction) {
    try {
      console.log(`‚úÖ CONFIRMING PAYMENT: ${transaction.ma_giao_dich}`);

      // C·∫≠p nh·∫≠t database
      await prisma.$transaction(async (tx) => {
        // C·∫≠p nh·∫≠t giao d·ªãch
        await tx.giao_dich_ngan_hang.update({
          where: { id: transaction.id },
          data: {
            trang_thai: 'da_xac_nhan',
            nguoi_xac_nhan: 'SIMPLE_AUTO_DETECTION',
            thoi_gian_xac_nhan: new Date()
          }
        });

        // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
        await tx.don_hang.update({
          where: { id: transaction.don_hang.id },
          data: {
            trang_thai_thanh_toan: true,
            trang_thai: 'da_xac_nhan'
          }
        });
      });

      // Th√¥ng b√°o Socket.IO
      if (global.io) {
        global.io.to(`transaction-${transaction.ma_giao_dich}`).emit('payment-success', {
          transactionId: transaction.ma_giao_dich,
          orderId: transaction.ma_don_hang,
          message: 'Thanh to√°n th√†nh c√¥ng! ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.',
          timestamp: new Date().toISOString(),
          customerInfo: {
            name: transaction.don_hang.khach_hang?.ho_ten,
            email: transaction.don_hang.khach_hang?.email
          }
        });
        console.log(`üì° Socket.IO notification sent for ${transaction.ma_giao_dich}`);
      }

      console.log(`üéâ PAYMENT CONFIRMED: ${transaction.ma_giao_dich}`);
      return true;

    } catch (error) {
      console.error(`Error confirming payment ${transaction.ma_giao_dich}:`, error);
      return false;
    }
  }

  // X·ª≠ l√Ω giao d·ªãch h·∫øt h·∫°n
  async handleExpiredTransaction(transaction) {
    try {
      console.log(`‚è∞ Handling expired transaction: ${transaction.ma_giao_dich}`);

      await prisma.$transaction(async (tx) => {
        // C·∫≠p nh·∫≠t giao d·ªãch h·∫øt h·∫°n
        await tx.giao_dich_ngan_hang.update({
          where: { id: transaction.id },
          data: {
            trang_thai: 'het_han',
            thoi_gian_xac_nhan: new Date()
          }
        });

        // ƒê·∫£m b·∫£o ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n
        await tx.don_hang.update({
          where: { id: transaction.don_hang.id },
          data: {
            trang_thai: 'cho_xac_nhan',
            trang_thai_thanh_toan: false
          }
        });
      });

      // Th√¥ng b√°o timeout
      if (global.io) {
        global.io.to(`transaction-${transaction.ma_giao_dich}`).emit('payment-timeout', {
          transactionId: transaction.ma_giao_dich,
          orderId: transaction.ma_don_hang,
          message: 'Giao d·ªãch ƒë√£ h·∫øt h·∫°n! Vui l√≤ng th·ª≠ l·∫°i.',
          timeout: true,
          timestamp: new Date().toISOString()
        });
      }

      console.log(`‚úÖ Expired transaction handled: ${transaction.ma_giao_dich}`);
    } catch (error) {
      console.error(`Error handling expired transaction ${transaction.ma_giao_dich}:`, error);
    }
  }

  // L·∫•y tr·∫°ng th√°i
  getStatus() {
    return {
      isRunning: this.isRunning,
      checkInterval: this.checkInterval ? 'active' : 'inactive'
    };
  }
}

module.exports = new SimpleBankPaymentDetectionService();



const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');

const prisma = new PrismaClient();

class UltraAccuratePaymentDetectionService {
  constructor() {
    this.isRunning = false;
    this.checkInterval = null;
    this.verificationService = null;
    this.startTime = null;
  }

  // Kh·ªüi ƒë·ªông h·ªá th·ªëng ph√°t hi·ªán si√™u ch√≠nh x√°c
  async start() {
    if (this.isRunning) {
      console.log('Ultra accurate payment detection is already running');
      return;
    }

    console.log('üöÄ Starting Ultra Accurate Payment Detection Service...');
    this.isRunning = true;
    this.startTime = Date.now();

    // Ki·ªÉm tra m·ªói 3 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o ph√°t hi·ªán nhanh nh·∫•t
    this.checkInterval = setInterval(async () => {
      await this.checkForPayments();
    }, 3000);

    // Cleanup expired transactions m·ªói 10 gi√¢y
    cron.schedule('*/10 * * * * *', () => {
      this.cleanupExpiredTransactions();
    });

    console.log('‚úÖ Ultra Accurate Payment Detection Service started');
  }

  // D·ª´ng h·ªá th·ªëng
  async stop() {
    if (!this.isRunning) {
      console.log('Ultra accurate payment detection is not running');
      return;
    }

    console.log('üõë Stopping Ultra Accurate Payment Detection Service...');
    this.isRunning = false;

    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }

    console.log('‚úÖ Ultra Accurate Payment Detection Service stopped');
  }

  // Ki·ªÉm tra thanh to√°n v·ªõi ƒë·ªô ch√≠nh x√°c 100%
  async checkForPayments() {
    try {
      // L·∫•y t·∫•t c·∫£ giao d·ªãch ch·ªù x√°c nh·∫≠n
      const pendingTransactions = await prisma.giao_dich_ngan_hang.findMany({
        where: {
          trang_thai: 'cho_xac_nhan',
          thoi_gian_het_han: {
            gt: new Date() // Ch∆∞a h·∫øt h·∫°n
          }
        },
        include: {
          don_hang: {
            include: {
              khach_hang: true
            }
          }
        },
        orderBy: {
          thoi_gian_tao: 'asc'
        }
      });

      console.log(`üîç Checking ${pendingTransactions.length} pending transactions...`);

      for (const transaction of pendingTransactions) {
        await this.verifyTransaction(transaction);
      }
    } catch (error) {
      console.error('Error checking for payments:', error);
    }
  }

  // X√°c minh giao d·ªãch v·ªõi ki·ªÉm tra k√©p
  async verifyTransaction(transaction) {
    try {
      console.log(`üîç Verifying transaction: ${transaction.ma_giao_dich}`);

      // KI·ªÇM TRA K√âP 1: Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
      if (new Date() > transaction.thoi_gian_het_han) {
        console.log(`‚è∞ Transaction ${transaction.ma_giao_dich} has expired`);
        await this.handleExpiredTransaction(transaction);
        return;
      }

      // KI·ªÇM TRA K√âP 2: Ki·ªÉm tra s·ªë ti·ªÅn h·ª£p l·ªá
      if (transaction.so_tien <= 0) {
        console.log(`‚ùå Invalid amount for transaction ${transaction.ma_giao_dich}`);
        return;
      }

      // KI·ªÇM TRA K√âP 3: Ki·ªÉm tra ƒë∆°n h√†ng t·ªìn t·∫°i
      if (!transaction.don_hang) {
        console.log(`‚ùå Order not found for transaction ${transaction.ma_giao_dich}`);
        return;
      }

      // KI·ªÇM TRA K√âP 4: Ki·ªÉm tra kh√°ch h√†ng t·ªìn t·∫°i
      if (!transaction.don_hang.khach_hang) {
        console.log(`‚ùå Customer not found for transaction ${transaction.ma_giao_dich}`);
        return;
      }

      // KI·ªÇM TRA K√âP 5: Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
      if (transaction.don_hang.trang_thai !== 'cho_xac_nhan') {
        console.log(`‚ùå Order status invalid for transaction ${transaction.ma_giao_dich}`);
        return;
      }

      // KI·ªÇM TRA K√âP 6: Ki·ªÉm tra th·ªùi gian t·∫°o giao d·ªãch (kh√¥ng qu√° c≈©)
      const transactionAge = new Date() - transaction.thoi_gian_tao;
      if (transactionAge > 24 * 60 * 60 * 1000) { // 24 gi·ªù
        console.log(`‚ùå Transaction ${transaction.ma_giao_dich} is too old`);
        return;
      }

      console.log(`‚úÖ All verification checks passed for transaction ${transaction.ma_giao_dich}`);

      // N·∫øu t·∫•t c·∫£ ki·ªÉm tra ƒë·ªÅu pass, x√°c nh·∫≠n thanh to√°n
      await this.confirmPayment(transaction, 'ULTRA_ACCURATE_AUTO');

    } catch (error) {
      console.error(`Error verifying transaction ${transaction.ma_giao_dich}:`, error);
    }
  }

  // X√°c nh·∫≠n thanh to√°n v·ªõi ƒë·ªô ch√≠nh x√°c 100%
  async confirmPayment(transaction, source) {
    try {
      console.log(`üéâ CONFIRMING PAYMENT: ${transaction.ma_giao_dich} from ${source}`);

      // S·ª≠ d·ª•ng database transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
      await prisma.$transaction(async (tx) => {
        // C·∫≠p nh·∫≠t giao d·ªãch
        await tx.giao_dich_ngan_hang.update({
          where: { id: transaction.id },
          data: {
            trang_thai: 'da_xac_nhan',
            nguoi_xac_nhan: source,
            thoi_gian_xac_nhan: new Date()
          }
        });

        // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
        await tx.don_hang.update({
          where: { id: transaction.don_hang.id },
          data: {
            trang_thai_thanh_toan: true,
            trang_thai: 'da_xac_nhan'
          }
        });
      });

      // Emit Socket.IO event
      if (global.io) {
        const roomName = `transaction-${transaction.ma_giao_dich}`;
        global.io.to(roomName).emit('payment-success', {
          transactionId: transaction.ma_giao_dich,
          orderId: transaction.ma_don_hang,
          message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n t·ª± ƒë·ªông!',
          source: source,
          timestamp: new Date().toISOString(),
          customerInfo: {
            name: transaction.don_hang.khach_hang?.ho_ten,
            email: transaction.don_hang.khach_hang?.email
          },
          isUltraAccurate: true
        });
        console.log(`üì° Socket.IO event emitted for ULTRA ACCURATE payment: ${transaction.ma_giao_dich}`);
      }

      console.log(`‚úÖ ULTRA ACCURATE Payment confirmed: ${transaction.ma_giao_dich}`);
      return true;

    } catch (error) {
      console.error(`Error confirming ultra accurate payment ${transaction.ma_giao_dich}:`, error);
      return false;
    }
  }

  // X·ª≠ l√Ω giao d·ªãch h·∫øt h·∫°n
  async handleExpiredTransaction(transaction) {
    try {
      console.log(`‚è∞ Handling expired transaction: ${transaction.ma_giao_dich}`);

      await prisma.$transaction(async (tx) => {
        // C·∫≠p nh·∫≠t giao d·ªãch h·∫øt h·∫°n
        await tx.giao_dich_ngan_hang.update({
          where: { id: transaction.id },
          data: {
            trang_thai: 'het_han',
            thoi_gian_xac_nhan: new Date()
          }
        });

        // ƒê·∫£m b·∫£o ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i ch·ªù x√°c nh·∫≠n (kh√¥ng thanh to√°n)
        await tx.don_hang.update({
          where: { id: transaction.don_hang.id },
          data: {
            trang_thai: 'cho_xac_nhan',
            trang_thai_thanh_toan: false
          }
        });
      });

      // Emit Socket.IO event
      if (global.io) {
        const roomName = `transaction-${transaction.ma_giao_dich}`;
        global.io.to(roomName).emit('payment-timeout', {
          transactionId: transaction.ma_giao_dich,
          orderId: transaction.ma_don_hang,
          message: 'Giao d·ªãch ƒë√£ h·∫øt h·∫°n! Vui l√≤ng th·ª≠ l·∫°i.',
          timeout: true,
          timestamp: new Date().toISOString()
        });
        console.log(`üì° Socket.IO timeout event emitted: ${transaction.ma_giao_dich}`);
      }

      console.log(`‚úÖ Expired transaction handled: ${transaction.ma_giao_dich}`);
    } catch (error) {
      console.error(`Error handling expired transaction ${transaction.ma_giao_dich}:`, error);
    }
  }

  // Cleanup c√°c giao d·ªãch h·∫øt h·∫°n
  async cleanupExpiredTransactions() {
    try {
      const expiredTransactions = await prisma.giao_dich_ngan_hang.findMany({
        where: {
          trang_thai: 'cho_xac_nhan',
          thoi_gian_het_han: {
            lt: new Date()
          }
        }
      });

      for (const transaction of expiredTransactions) {
        await this.handleExpiredTransaction(transaction);
      }

      if (expiredTransactions.length > 0) {
        console.log(`üßπ Cleaned up ${expiredTransactions.length} expired transactions`);
      }
    } catch (error) {
      console.error('Error cleaning up expired transactions:', error);
    }
  }

  // L·∫•y tr·∫°ng th√°i h·ªá th·ªëng
  getStatus() {
    return {
      isRunning: this.isRunning,
      checkInterval: this.checkInterval ? 'active' : 'inactive',
      uptime: this.isRunning ? Date.now() - this.startTime : 0
    };
  }
}

module.exports = new UltraAccuratePaymentDetectionService();

const { PrismaClient } = require('@prisma/client');
const qrPaymentService = require('../services/qrPayment.service');
const CustomError = require('../services/CustomError');
const crypto = require('crypto');

const prisma = new PrismaClient();

// T·∫°o QR code thanh to√°n ng√¢n h√†ng
exports.createBankQRPayment = async (req, res) => {
  try {
    const { id } = req.params; // order id
    const { customerId } = req; // t·ª´ middleware

    // Ki·ªÉm tra ƒë∆°n h√†ng
    const order = await prisma.don_hang.findUnique({ 
      where: { id: Number(id) },
      include: {
        chi_tiet_don_hang: {
          include: {
            san_pham: true
          }
        }
      }
    });

    if (!order) {
      throw new CustomError('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng', 404);
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu (n·∫øu c√≥ customerId)
    if (customerId && order.id_khach_hang !== customerId) {
      throw new CustomError('Kh√¥ng c√≥ quy·ªÅn v·ªõi ƒë∆°n h√†ng n√†y', 403);
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (order.trang_thai !== 'cho_xac_nhan') {
      throw new CustomError('ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ thanh to√°n', 400);
    }

    if (order.trang_thai_thanh_toan) {
      throw new CustomError('ƒê∆°n h√†ng ƒë√£ thanh to√°n', 400);
    }

    // T·∫°o QR payment
    const qrPayment = await qrPaymentService.createBankQRPayment(
      order.ma_don_hang,
      order.tong_tien,
      `Thanh toan don hang ${order.ma_don_hang}`
    );

    res.json({
      success: true,
      data: qrPayment,
      message: 'QR code thanh to√°n ng√¢n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o'
    });

  } catch (error) {
    if (error.statusCode) {
      return res.status(error.statusCode).json({ error: error.message });
    }
    console.error('Create bank QR payment error:', error);
    res.status(500).json({ error: 'L·ªói t·∫°o QR thanh to√°n ng√¢n h√†ng' });
  }
};

// T·∫°o QR code thanh to√°n MoMo
exports.createMoMoQRPayment = async (req, res) => {
  try {
    const { id } = req.params; // order id
    const { customerId } = req; // t·ª´ middleware

    // Ki·ªÉm tra ƒë∆°n h√†ng
    const order = await prisma.don_hang.findUnique({ 
      where: { id: Number(id) },
      include: {
        chi_tiet_don_hang: {
          include: {
            san_pham: true
          }
        }
      }
    });

    if (!order) {
      throw new CustomError('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng', 404);
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu (n·∫øu c√≥ customerId)
    if (customerId && order.id_khach_hang !== customerId) {
      throw new CustomError('Kh√¥ng c√≥ quy·ªÅn v·ªõi ƒë∆°n h√†ng n√†y', 403);
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
    if (order.trang_thai !== 'cho_xac_nhan') {
      throw new CustomError('ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ thanh to√°n', 400);
    }

    if (order.trang_thai_thanh_toan) {
      throw new CustomError('ƒê∆°n h√†ng ƒë√£ thanh to√°n', 400);
    }

    // T·∫°o QR payment
    const qrPayment = await qrPaymentService.createMoMoQRPayment(
      order.ma_don_hang,
      order.tong_tien,
      `Thanh toan don hang ${order.ma_don_hang}`
    );

    res.json({
      success: true,
      data: qrPayment,
      message: 'QR code thanh to√°n MoMo ƒë√£ ƒë∆∞·ª£c t·∫°o'
    });

  } catch (error) {
    if (error.statusCode) {
      return res.status(error.statusCode).json({ error: error.message });
    }
    console.error('Create MoMo QR payment error:', error);
    res.status(500).json({ error: 'L·ªói t·∫°o QR thanh to√°n MoMo' });
  }
};

// Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
exports.checkPaymentStatus = async (req, res) => {
  try {
    const { transactionId } = req.params;

    const status = await qrPaymentService.checkPaymentStatus(transactionId);

    res.json({
      success: true,
      data: status
    });

  } catch (error) {
    console.error('Check payment status error:', error);
    res.status(500).json({ error: 'L·ªói ki·ªÉm tra tr·∫°ng th√°i thanh to√°n' });
  }
};

// H·ªßy giao d·ªãch
exports.cancelTransaction = async (req, res) => {
  try {
    const { transactionId } = req.params;

    const cancelled = qrPaymentService.cancelTransaction(transactionId);

    if (cancelled) {
      res.json({
        success: true,
        message: 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c h·ªßy'
      });
    } else {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y giao d·ªãch'
      });
    }

  } catch (error) {
    console.error('Cancel transaction error:', error);
    res.status(500).json({ error: 'L·ªói h·ªßy giao d·ªãch' });
  }
};

// üöÄ NEW: Bank Webhook Handler - Nh·∫≠n th√¥ng b√°o t·ª´ gateway khi c√≥ chuy·ªÉn kho·∫£n
exports.handleBankWebhook = async (req, res) => {
  try {
    const body = req.body;
    console.log('üîî Bank webhook received:', JSON.stringify(body, null, 2));

    // 1) Verify webhook signature ƒë·ªÉ ƒë·∫£m b·∫£o t·ª´ gateway th·∫≠t
    if (!verifyWebhookSignature(body, req.headers)) {
      console.warn('‚ùå Invalid webhook signature');
      return res.status(401).json({ success: false, message: 'Invalid signature' });
    }

    // 2) Parse payload theo format c·ªßa gateway
    const paymentData = parseWebhookPayload(body);
    if (!paymentData) {
      console.warn('‚ùå Invalid webhook payload format');
      return res.status(400).json({ success: false, message: 'Invalid payload' });
    }

    const { amount, description, transactionRef, bankCode, accountNumber } = paymentData;

    // 3) Ch·ªâ x·ª≠ l√Ω giao d·ªãch chuy·ªÉn v√†o t√†i kho·∫£n MB Bank c·ªßa m√¨nh
    const expectedAccount = process.env.VIETQR_ACCOUNT_NUMBER;
    const expectedBank = process.env.VIETQR_BANK_CODE;
    
    if (bankCode !== expectedBank || accountNumber !== expectedAccount) {
      console.log(`‚ÑπÔ∏è Transaction for different account: ${bankCode}-${accountNumber}`);
      return res.json({ success: true, ignored: true });
    }

    // 4) T√¨m giao d·ªãch pending ph√π h·ª£p
    const matchedTransaction = await findMatchingPendingTransaction(amount, description);
    
    if (!matchedTransaction) {
      console.warn('‚ö†Ô∏è No matching pending transaction found');
      // Log ƒë·ªÉ admin c√≥ th·ªÉ xem x√©t
      await logUnmatchedWebhook({
        amount,
        description,
        transactionRef,
        bankCode,
        accountNumber,
        webhookBody: body
      });
      return res.json({ success: true, matched: false });
    }

    // 5) X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng
    console.log(`‚úÖ Processing payment for transaction: ${matchedTransaction.ma_giao_dich}`);
    await qrPaymentService.verifyBankTransaction(
      matchedTransaction.ma_giao_dich, 
      'BANK_WEBHOOK_AUTO'
    );

    console.log(`üéâ Payment confirmed successfully: ${matchedTransaction.ma_giao_dich}`);
    
    return res.json({ 
      success: true, 
      matched: true, 
      transactionId: matchedTransaction.ma_giao_dich 
    });

  } catch (error) {
    console.error('‚ùå Bank webhook error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Internal server error' 
    });
  }
};

// Webhook ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n t·ª´ MoMo
exports.updateMoMoPaymentStatus = async (req, res) => {
  try {
    const params = req.body;
    const { verifyMoMoSignature } = require('../utils/momo');
    
    const valid = verifyMoMoSignature(params);
    if (!valid) {
      return res.status(400).json({ message: 'invalid signature' });
    }

    const { orderId, resultCode } = params;
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong QR service
    const transactionId = await qrPaymentService.updatePaymentStatus(orderId, 'paid');

    // C·∫≠p nh·∫≠t database
    const order = await prisma.don_hang.findFirst({ 
      where: { ma_don_hang: orderId } 
    });
    
    if (order && Number(resultCode) === 0 && order.trang_thai === 'cho_xac_nhan') {
      await prisma.don_hang.update({
        where: { id: order.id },
        data: { 
          trang_thai_thanh_toan: true, 
          trang_thai: 'da_xac_nhan' 
        }
      });
    }

    res.json({ message: 'ok' });
  } catch (error) {
    console.error('Update MoMo payment status error:', error);
    res.status(500).json({ message: 'internal error' });
  }
};

// üõ°Ô∏è Helper Functions

// Verify webhook signature
function verifyWebhookSignature(body, headers) {
  const secret = process.env.BANK_WEBHOOK_SECRET;
  if (!secret) {
    console.warn('‚ö†Ô∏è No BANK_WEBHOOK_SECRET configured, skipping signature verification');
    return true; // Trong dev c√≥ th·ªÉ b·ªè qua
  }

  // C√°c gateway kh√°c nhau c√≥ c√°ch verify kh√°c nhau
  const signature = headers['x-signature'] || headers['X-Signature'] || headers['signature'];
  
  if (!signature) {
    return false;
  }

  // Sepay format: HMAC-SHA256
  if (process.env.SEPAY_TOKEN) {
    const expectedSignature = crypto
      .createHmac('sha256', secret)
      .update(JSON.stringify(body))
      .digest('hex');
    return signature === expectedSignature;
  }

  // Casso format: check token
  if (process.env.CASSO_API_KEY) {
    return signature === secret;
  }

  // Default: simple string comparison
  return signature === secret;
}

// Parse webhook payload t·ª´ gateway
function parseWebhookPayload(body) {
  try {
    // Sepay.vn format
    if (body.type && body.data) {
      const data = body.data;
      return {
        amount: Number(data.amount || data.transferAmount),
        description: String(data.description || data.content || data.transferNote || ''),
        transactionRef: String(data.tid || data.transactionId || data.id),
        bankCode: String(data.accountBankCode || data.bankCode || 'MB').toUpperCase(),
        accountNumber: String(data.accountNumber || data.account)
      };
    }

    // Casso.vn format
    if (body.error === 0 && body.data && Array.isArray(body.data.records)) {
      const record = body.data.records[0]; // L·∫•y transaction ƒë·∫ßu ti√™n
      if (record) {
        return {
          amount: Number(record.amount),
          description: String(record.description || ''),
          transactionRef: String(record.tid),
          bankCode: 'MB', // Casso th∆∞·ªùng cho MB Bank
          accountNumber: String(record.account)
        };
      }
    }

    // Generic format
    if (body.amount && body.description) {
      return {
        amount: Number(body.amount),
        description: String(body.description),
        transactionRef: String(body.transactionRef || body.id || ''),
        bankCode: String(body.bankCode || 'MB').toUpperCase(),
        accountNumber: String(body.accountNumber || process.env.VIETQR_ACCOUNT_NUMBER)
      };
    }

    return null;
  } catch (error) {
    console.error('Error parsing webhook payload:', error);
    return null;
  }
}

// T√¨m giao d·ªãch pending kh·ªõp v·ªõi webhook
async function findMatchingPendingTransaction(amount, description) {
  try {
    // L·∫•y t·∫•t c·∫£ pending transactions ch∆∞a h·∫øt h·∫°n
    const pendingTransactions = await prisma.giao_dich_ngan_hang.findMany({
      where: {
        trang_thai: 'cho_xac_nhan',
        thoi_gian_het_han: {
          gt: new Date() // Ch∆∞a h·∫øt h·∫°n
        }
      },
      orderBy: {
        thoi_gian_tao: 'desc'
      }
    });

    // T√¨m transaction kh·ªõp theo verification code v√† amount
    for (const tx of pendingTransactions) {
      const amountMatch = Math.abs(Number(tx.so_tien) - amount) < 1000; // Cho ph√©p l·ªách < 1000 VND
      const codeMatch = description.includes(tx.ma_xac_minh); // C√≥ verification code
      const orderMatch = description.includes(tx.ma_don_hang); // Ho·∫∑c c√≥ m√£ ƒë∆°n h√†ng
      
      if (amountMatch && (codeMatch || orderMatch)) {
        return tx;
      }
    }

    return null;
  } catch (error) {
    console.error('Error finding matching transaction:', error);
    return null;
  }
}

// Log webhook kh√¥ng kh·ªõp ƒë·ªÉ admin xem x√©t
async function logUnmatchedWebhook(data) {
  try {
    // C√≥ th·ªÉ l∆∞u v√†o database table ri√™ng cho unmatched webhooks
    console.log('üìù Logging unmatched webhook:', {
      timestamp: new Date().toISOString(),
      amount: data.amount,
      description: data.description,
      transactionRef: data.transactionRef
    });
    
    // TODO: L∆∞u v√†o b·∫£ng webhook_logs n·∫øu c·∫ßn
  } catch (error) {
    console.error('Error logging unmatched webhook:', error);
  }
}

// üéØ Admin function: Manual verify transaction (backup plan)
exports.manualVerifyTransaction = async (req, res) => {
  try {
    const { transactionId } = req.params;
    const { userId } = req; // T·ª´ admin middleware
    
    if (!userId) {
      return res.status(401).json({ error: 'Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√°c nh·∫≠n th·ªß c√¥ng' });
    }

    await qrPaymentService.verifyBankTransaction(transactionId, `ADMIN_${userId}`);
    
    res.json({
      success: true,
      message: 'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th·ªß c√¥ng'
    });
  } catch (error) {
    console.error('Manual verify transaction error:', error);
    res.status(500).json({ error: error.message });
  }
};